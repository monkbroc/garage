'use strict';

var SerialPortBinding = require("bindings")("serialportpins.node");
var util = require('util');
var events = require('events');

function SerialPort () {
}
util.inherits(SerialPort, events.EventEmitter);
exports.SerialPort = SerialPort;

SerialPort.prototype.open = function (path, callback) {
  var self = this;
  process.nextTick(function () {
    var options = {};
    options.baudRate = 9600;
    options.dataBits = 8;
    options.parity = 'none';
    options.stopBits = 1;
	options.flowControl = false;
    options.errorCallback = function (err) {
      self.emit('error', err);
    };
    options.disconnectedCallback = function () {
      self.emit('error', new Error("Disconnected"));
      self.close();
    };

    if (process.platform == 'win32') {
      path = '\\\\.\\' + path;
    } else {
		// not supported on linux or mac
    }

    SerialPortBinding.open(path, options, function (err, fd) {
      self.fd = fd;
      if (callback) {
        callback(err);
      }
      if (err) {
        return self.emit('error', err);
      }

      self.emit('open');
    });
  });
};

SerialPort.prototype.isOpen = function () {
	return !!(this.fd);
}

SerialPort.prototype.setControlLines = function (options) {
  var self = this;
  if (!this.fd) {
    return;
  }

  options = options || {};
  // options.dtr => set or clear DTR line
  // options.rts => set or clear RTS line

  if (process.platform === 'win32') {
	try {
      SerialPortBinding.setControlLines(this.fd, options);
	} catch (ex) {
	  self.close();
      self.emit('error', ex);
    }
  } else if (process.platform === 'darwin') {
    /* Do nothing */
  } else {
    /* Do nothing */
  }

  return;
};

SerialPort.prototype.getControlLines = function () {
  var self = this;
  if (!this.fd) {
    return;
  }

  var options = {};
  options.dsr = false;
  options.cts = false;

  if (process.platform === 'win32') {
	try {
	  SerialPortBinding.getControlLines(this.fd, options);
	} catch (ex) {
	  self.close();
      self.emit('error', ex);
    }
  } else if (process.platform === 'darwin') {
    /* Do nothing */
  } else {
    /* Do nothing */
  }

  return options;
};

SerialPort.prototype.close = function (callback) {
  var fd = this.fd;
  this.fd = 0;

  if (this.closing) {
    return;
  }
  if (!fd) {
    if (callback) {
      return callback(new Error("Serialport not open."));
    } else {
      return;
    }
  }

  this.closing = true;
  try {
    var self = this;

    SerialPortBinding.close(fd, function (err) {
      if (err) {
        self.emit('error', err);
      }
      if (callback) {
        callback(err);
      }
      self.emit('close');
      this.closing = false;
    });
  } catch (ex) {
    this.closing = false;
    throw ex;
  }
};

